{"version":3,"sources":["GoogleDriveGallery/index.js","GoogleDriveGallery/GoogleDriveGallery.js","data/photoFolders.js","data/consts.js","App.js","serviceWorker.js","index.js"],"names":["GoogleDriveGallery","state","imagesList","currentImage","error","loading","isOpen","_this2","this","map","_ref","id","name","src","concat","props","googleApiKey","caption","folderId","pattern","pageSize","setState","query","QUERY_URL","images","nextPageToken","fetch","response","json","push","apply","Object","toConsumableArray","_ref2","imageListAsImageGalleryItems","console","_context","t0","getImagesList","_this3","react_default","a","createElement","className","Lightbox_default","onClose","onClickPrev","gotoPrevious","onClickNext","gotoNext","imageCountSeparator","Component","photoFolders","nepal2015","args","india2016","spb2017","consts","Home","react_markdown_default","source","Photo","entries","slicedToArray","route","_ref2$","key","Link","to","App","Route","exact","path","component","_ref3","_ref4","_ref4$","arguments","length","undefined","src_GoogleDriveGallery","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef91c635.chunk.js","sourcesContent":["import GoogleDriveGallery from './GoogleDriveGallery';\n\nexport default GoogleDriveGallery;","import React, { Component } from 'react';\nimport Lightbox from 'react-images';\n\nimport './GoogleDriveGallery.css';\n\n\nexport default class GoogleDriveGallery extends Component {\n  \n  state = {\n    imagesList: [],\n    currentImage: 0,\n    error: false,\n    loading: false,\n    isOpen: true,\n  }\n\n  imageListAsImageGalleryItems(imagesList) {\n    return imagesList.map(\n      ({id, name}) => {\n        return {\n          src: `https://www.googleapis.com/drive/v3/files/${id}?alt=media&key=${this.props.googleApiKey}`,\n          caption: name,\n        };\n      }\n    )\n  }\n\n  async getImagesList(folderId, googleApiKey, pattern=null, pageSize=1000) {\n    try {\n      this.setState({loading: true});\n      const query = `'${folderId}'+in+parents+and+mimeType+contains+'image/'` + (pattern ? `+and+name+contains+'${pattern}'` : '')\n      const QUERY_URL = `https://www.googleapis.com/drive/v3/files?q=${query}&pageSize=${pageSize}&key=${googleApiKey}`;\n      const images = [];\n      let nextPageToken = true;\n      while (nextPageToken) {\n        const response = await fetch(QUERY_URL);\n        const json = await response.json();\n        images.push(...json['files'].map(({id, name}) => {return {id, name};}));\n        nextPageToken = json['nextPageToken'];\n      }\n      this.setState(\n        {\n          imagesList: this.imageListAsImageGalleryItems(images),\n          loading: false\n        }\n      );\n    } catch (error) {\n      console.error(error);\n      this.setState({error: true, loading: false});\n    }\n  }\n\n  async componentDidMount() {\n    const { folderId, googleApiKey, pattern } = this.props;\n    await this.getImagesList(folderId, googleApiKey, pattern);\n  }\n\n  gotoPrevious () {\n    this.setState({\n      currentImage: this.state.currentImage - 1,\n    });\n  }\n\n  gotoNext () {\n    this.setState({\n      currentImage: this.state.currentImage + 1,\n    });\n  }\n\n  render() {\n    return (\n      this.state.loading ?\n         \n        <div className='loading'>Loading...</div> :\n         \n      this.state.error ?\n\n        <div className='error'>Error loading gallery!</div> :\n\n      <Lightbox\n        images={this.state.imagesList}\n        isOpen={this.state.isOpen}\n        onClose={() => this.setState({isOpen: false})}\n        onClickPrev={() => this.gotoPrevious()}\n        onClickNext={() => this.gotoNext()}\n        imageCountSeparator='/'\n        currentImage={this.state.currentImage}\n      />\n    );\n  }\n}","export default {\n  //'route': {name: 'Displayed name', args: ['Folder id in google drive', 'filter word']}\n  'nepal2015': {name: 'Nepal 2015', args: ['0B05WBmFwB2iETlFEYU5VWEVyUmM']},\n  'india2016': {name: 'India 2016', args: ['0B05WBmFwB2iEQXM4bElaUDlPT2M']},\n  'spb2017': {name: 'Spb 2017', args: ['0B05WBmFwB2iEYXVWWGlTSVUwZzA']},\n};","export default {\n    GOOGLE_API_KEY: 'AIzaSyCRLzBFmko0AwnvUAWS78FhKxP75CukJFM',\n}","import React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\n\nimport GoogleDriveGallery from './GoogleDriveGallery';\n\nimport './App.css';\n\nimport { photoFolders, consts } from './data';\n\nconst Gallery = (folderId, pattern = null) => () => (\n  <GoogleDriveGallery\n    googleApiKey={consts.GOOGLE_API_KEY}\n    folderId={folderId}\n    pattern={pattern}\n  />\n);\n\nconst Home = () => (\n  <div>\n    <ReactMarkdown source={'# Это заголовок\\n\\nА это - обычный **текст**.'}/>\n  </div>\n);\n\nconst Photo = () => (\n  <div>\n    <ReactMarkdown source={'# Photo'}/>\n    <ul>\n      {Object.entries(photoFolders).map(\n        ([route, {name, args}]) => <li key={route}><Link to={`/photo/${route}`}>{name}</Link></li>\n      )}\n    </ul>\n  </div>\n);\n\nclass App extends Component {\n\n  render() {\n    return (\n       <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/photo\">Photo</Link>\n          </li>\n        </ul>\n        \n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/photo\" component={Photo} />\n        {\n          Object.entries(photoFolders).map(\n            ([route, {name, args}]) => \n              <Route\n                exact\n                path={`/photo/${route}`}\n                component={Gallery(...args)}\n                key={route}\n              />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}